#!/usr/bin/env ruby

require "thor"
require "hammer"
require "erb"
require "rainbow/refinement"

using Rainbow

class HammerCLI < Thor
  include Hammer

  class_option :extras, type: :hash, default: {}
  class_option :fullload, type: :boolean, default: false

  desc "inspect FILE", "Inspect a file and extract basic stats"
  option :stats, type: :boolean, default: false
  option :sample, type: :boolean, default: false
  def inspect(file)
    file_format = detect_format(file, extras: extras)
    file_data = loads(file_format, filename: file, extras: extras)

    print_stat "File format", file_format
    print_stat("Number of records", file_data.size) if extras.fetch("fullload", false)
    file_data.metadata.each{|k,v| print_stat(to_title(k), v)}
    print_stat "Properties", file_data.columns.map{|p| "\n  - #{p.name} (#{p.type.yellow})"}.join

    if options[:stats]
      stats = file_data.columns.each_with_object([]) do |col,acc|
        stat = col.stats

        unless stat.nil?
          acc << "  #{col.name} (#{col.type.yellow})"
          stat.each do |(k,v)|
            acc << "    - #{k}: #{v.to_s.cyan}"
          end
        end
      end

      print_stat "Stats", "\n" + stats.join("\n") unless stats.empty?
    end

    if options[:sample]
      print_stat "Content sample"
      file_data.rows.take(5).each do |row|
        puts row.join(" | ".yellow)
      end
    end
  rescue Exception => e
    STDERR.puts "Error: #{e.message}".red
    STDERR.puts e.backtrace.join("\n").red
  end

  desc "template FILE TEMPLATE", "Process the template in the file"
  def template(file, template)
    file_format = detect_format(file, extras: extras)
    file_data = loads(file_format, filename: file, extras: extras)
    tmpl = ERB.new template

    names = file_data.column_names.map(&:to_sym)
    file_data.rows.each do |row|
      ctx = Hash[names.zip(row)]
      puts tmpl.result_with_hash(ctx)
    end
  end

  no_commands {
    def extras
      @extras ||= options[:extras].merge("fullload" => options[:fullload])
    end

    def to_title(sym)
      sym
        .to_s
        .downcase
        .split("_")
        .map{|w| "#{w[0].upcase}#{w[1..]}"}
        .join(" ")
    end

    def print_stat(prop, value="")
      puts "#{prop.red}: #{value.to_s}"
    end
  }
end

HammerCLI.start(ARGV)
